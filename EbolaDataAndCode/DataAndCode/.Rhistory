gbm.test.output.back <- predict(model.gbm,newdata=as.data.frame(killer.shrimp[[paste("test.background",type[j],sep="")]][,1:q]), n.trees=best.iter) #Predict on test background data
##code for testing performance, requires background/absences
performance.gbm.valid <- evaluate(p = gbm.validation.output.presence,
a = gbm.validation.output.back)
performance.gbm.test <- evaluate(p = gbm.test.output.presence,
a = gbm.test.output.back)
#Collect output
if(j==1) {valid.auc[[i]][9,1+j]<-performance.gbm.valid@auc
valid.auc[[i]][9,2+j]<-performance.gbm.test@auc}
if(j==2) {valid.auc[[i]][9,2+j]<-performance.gbm.valid@auc
valid.auc[[i]][9,3+j]<-performance.gbm.test@auc}
}
}
tempdir()
require(GillespieSSA)
require(deSolve)
require(snow)
#require(bigmemory)
#require(ff)
#Clear environment
rm(list=ls())
##Subordinate functions
Sherwood <- function(radius){ 1+0.619*(radius*0.13*(radius^0.26)/1e-2)^(0.412)*(1e-2/1e-5)^(1/3)}
#return(1)}
mu1 <- function(UB,AB,UE,AE,r,area){ifelse ((UB+AB+UE+AE)<=(1.9e3*r^1.34)/(1.39e-3*area), 1.39e-3, 1.39e-3*((1.9e3*r^1.34)/(1.39e-3*area))/(UB+AB+UE+AE))}
mu2 <- function(UB,AB,UE,AE,r,area){ifelse ((UB+AB+UE+AE)<=(1.9e3*r^1.34)/(1.39e-3), 1.39e-3, 1.39e-3*((1.9e3*r^1.34)/(1.39e-3))/(UB+AB+UE+AE))}
#alternate formulation of mu that is equivalent and longer
#Not currently used in routine
mu <- function(B,r,area){
if (B<=(1.9e3*(r^1.34)/(1.39e-3*area))){
x <- 1.39e-3
}else{
x <- 1.39e-3*(1.9e3*(r^1.34)/(1.39e-3*area))/B
}
return(x)
}
#odeSolve version
simul <- function(t, y, p){
#dB <- 0
dBU <- betaB*Ba0+mu1(y[1],y[2],y[3],y[4],r,area)*y[1]-deltaB*y[1]-gammaB*y[1]-(kf/(1+kf*Tf*(y[1]+y[2]+y[3]+y[4])))*y[1]*y[5]
dBS <- gammaB*y[1]+mu1(y[1],y[2],y[3],y[4],r,area)*y[2]-(kf/(1+kf*Tf*(y[1]+y[2]+y[3]+y[4])))*y[2]*y[5]
dEU <- betaB*Ea0+mu1(y[1],y[2],y[3],y[4],r,area)*y[3]-deltaB*y[3]-gammaB*y[3]-(kf/(1+kf*Tf*(y[1]+y[2]+y[3]+y[4])))*y[3]*y[5]
dES <- gammaB*y[3]+mu1(y[1],y[2],y[3],y[4],r,area)*y[4]-(kf/(1+kf*Tf*(y[1]+y[2]+y[3]+y[4])))*y[4]*y[5]
dF <- betaF*Fa0+(Yf*(kf/(1+kf*Tf*(y[1]+y[2]+y[3]+y[4]))))*(y[1]+y[2]+y[3]+y[4])*y[5]-deltaF*y[5]-(kc/(1+kc*Tc*y[5]))*y[5]*y[6]
dC <- betaC*Ca0+(Yc*(kc/(1+kc*Tc*y[5])))*y[5]*y[6]-deltaC*y[6]
list(c(dBU,dBS,dEU,dES,dF,dC))
}
#Rate equations
S <- rep(0,14)
S[1] <- "UB*(deltaB +((kf/(1+kf*Tf*((UB+AB+UE+AE)/area)))/area)*F)"      #loss of unattached to predation
S[2] <- "UB*gammaB"                                                     #loss of unattached bacteria to attached
S[3] <- "betaB*Ba0*area+mu2(UB,AB,UE,AE,r,area)*UB"			#gain of unattached bacteria
S[4] <- "AB*((kf/(1+kf*Tf*((UB+AB+UE+AE)/area)))/area)*F"               #loss of attached bacteria to predation
S[5] <- "AB*mu2(UB,AB,UE,AE,r,area)"                                    #gain of attached by birth
S[6] <- "UE*(deltaB+((kf/(1+kf*Tf*((UB+AB+UE+AE)/area)))/area)*F)"      #loss of focal unattached to predation
S[7] <- "UE*gammaB"                                                    #loss of unattached focal to attached
S[8] <- "betaB*Ea0*area+mu2(UB,AB,UE,AE,r,area)*UE"			#gain of unattached focal bacteria
S[9] <- "AE*((kf/(1+kf*Tf*((UB+AB+UE+AE)/area)))/area)*F"               #loss of attached focal to predation
S[10] <- "AE*mu2(UB,AB,UE,AE,r,area)"                                    #gain of attached focal by birth
#S[13] <- "F*deltaF"                                                     #loss of flagellates to detachment
#s[14] <- "F*((kc/(1+kc*Tc*(F/area)))/area)*C"                           #loss of flagellate to predation
S[11] <- "F*(deltaF+((kc/(1+kc*Tc*(F/area)))/area)*C)"
S[12] <- "betaF*Fa0*area+(Yf*((kf/(1+kf*Tf*((UB+AB+UE+AE)/area)))/area))*(UB+AB+UE+AE)*F"  #gain of flagellate
S[13] <- "deltaC*C"                                                     #loss of ciliate (flagellate predator)
S[14] <- "betaC*Ca0*area+(Yc*((kc/(1+kc*Tc*(F/area)))/area))*F*C"	#gain of ciliate
tmax <- 10000       #max times steps to simulate
reps <- 176         #number of instances to simulate, this is the number of nodes used and is multiplied below
nu<-matrix(c(-1,-1,+1,0,0,0,0,0,0,0,0,0,0,0,
0,+1,0,-1,+1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,-1,-1,+1,0,0,0,0,0,0,
0,0,0,0,0,0,+1,0,-1,+1,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,-1,+1,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,-1,+1),nrow=6,byrow=TRUE)
P <- rep(0,12)  #This is the previous form with aggregated rates
P[1] <- "UB*(deltaB+((kf/(1+kf*Tf*((UB+AB+UE+AE)/area)))/area)*F+gammaB)"	#loss of unattached bacteria
P[2] <- "betaB*Ba0*area+mu2(UB,AB,UE,AE,r,area)*UB"			#gain of unattached bacteria
P[3] <- "AB*((kf/(1+kf*Tf*((UB+AB+UE+AE)/area)))/area)*F"                        #loss of attached bacteria
P[4] <- "UB*gammaB+AB*mu2(UB,AB,UE,AE,r,area)"                      #gain of attached bacteria
P[5] <- "UE*(deltaB+((kf/(1+kf*Tf*((UB+AB+UE+AE)/area)))/area)*F+gammaB)"#loss of unattached focal bacteria
P[6] <- "betaB*Ea0*area+mu2(UB,AB,UE,AE,r,area)*UE"			#gain of unattached focal bacteria
P[7] <- "AE*((kf/(1+kf*Tf*((UB+AB+UE+AE)/area)))/area)*F"                        #loss of attached focal bacteria
P[8] <- "UE*gammaB+AE*mu2(UB,AB,UE,AE,r,area)"                      #gain of attached focal bacteria
P[9] <- "F*(deltaF+((kc/(1+kc*Tc*(F/area)))/area)*C)"               #loss of flagellate (bacterial predator)
P[10] <- "betaF*Fa0*area+(Yf*((kf/(1+kf*Tf*((UB+AB+UE+AE)/area)))/area))*(UB+AB+UE+AE)*F" #gain of flagellate
P[11] <- "deltaC*C"						#loss of ciliate (flagellate predator)
P[12] <- "betaC*Ca0*area+(Yc*((kc/(1+kc*Tc*(F/area)))/area))*F*C"		#gain of ciliate
nuP<-matrix(c(-1,+1,0,0,0,0,0,0,0,0,0,0,
0,0,-1,+1,0,0,0,0,0,0,0,0,
0,0,0,0,-1,+1,0,0,0,0,0,0,
0,0,0,0,0,0,-1,+1,0,0,0,0,
0,0,0,0,0,0,0,0,-1,+1,0,0,
0,0,0,0,0,0,0,0,0,0,-1,+1),nrow=6,byrow=TRUE)
#This is the stochastic birth-death version of the process
Simulate <- function(pass){
N0 <- pass[[1]]; tmax <- pass[[2]]; nu <- pass[[3]]; S <- pass[[4]]; parms <- pass[[5]]
time <- 0;  count <- 0; Run <- NULL; id <- pass[[6]]
Turnover <- data.frame(time=0,Presence=0,timeElapsed=0)
state <- c(0,0)
Sum <- matrix(0,nrow=6,ncol=2); colnames(Sum) <- c("Average","Max"); rownames(Sum) <- c("UB","AB","UE","AE","F","C")
TS <- NULL
while (time<tmax){
if (time<10){Temp <- ssa(x0=N0, tf=tmax,method="BTL",nu=nu,a=S,parms=parms,maxWallTime=c(60))}
else {Temp <- ssa(x0=N0, tf=tmax,method="OTL",nu=nu,a=S,parms=parms,maxWallTime=c(60))}
N0 <- c(UB=tail(Temp$data,1)[,2],AB=tail(Temp$data,1)[,3],UE=tail(Temp$data,1)[,4],
AE=tail(Temp$data,1)[,5],F=tail(Temp$data,1)[,6],C=tail(Temp$data,1)[,7])
temp.time<-tail(Temp$data,1)[1]
Temp$data[,1] <- Temp$data[,1]+time
Total <- cbind(Temp$data[,1],Temp$data[,2]+Temp$data[,3],Temp$data[,4]+Temp$data[,5],Temp$data[,6],Temp$data[,7])
for (k in 1:dim(Total)[1]){
temp <- Total[k,3]
if (temp==0 & state[1]==1){
ch <- c(Total[k,1],0,Total[k,1]-state[2])
state <- c(0,Total[k,1])
Turnover <- rbind(Turnover,ch)
}else{
if (temp>0 & state[1]==0){
ch <- c(Total[k,1],1,Total[k,1]-state[2])
Turnover <- rbind(Turnover,ch)
state <- c(1,Total[k,1])
}
else{ state <- state}
}
}
temp.mean <- colSums((diff(Temp$data[,1])/temp.time)*Temp$data[1:(dim(Temp$data)[1]-1),2:7])
for (j in 1:6){
Sum[j,1] <- temp.mean[j]*(temp.time/(time+temp.time))+Sum[j,1]*(time/(time+temp.time))
Sum[j,2] <- ifelse(max(Temp$data[,j+1])>Sum[j,2],max(Temp$data[,j+1]),Sum[j,2])
}
TS<-rbind(TS,Total[,c(1,3)])
time <- time+temp.time; count <- count+1
}
endTime<-max(Total[,1])
results<-list(Sum,Turnover,endTime,c(density=parms[15],size=parms[18]),TS,count)
save(results,file=paste("AggregateResultsOyster/BTL_",parms[18],"_",parms[15],"_rep",id,".RData",sep=''))
return(list(Sum,Turnover,endTime,c(density=parms[15],size=parms[18])))
}
proc.time()
size.bins<-seq(log10(0.01),log10(1),length.out=11)  ##This and the following two lines set up the desired aggregate sizes by evenly splitting on a log scale
size.bins.midpoints<-NULL
for (i in 1:10) size.bins.midpoints[i]<-(size.bins[i]+size.bins[i+1])/2
radii <- 10^size.bins.midpoints  #Transform the desired aggregate sizes back to cm
density <- c(1e4,1e3,1e2,1e1)
counter<-0
pass<-list()
for (k in 1:10){
r<-radii[k]            #aggregate radius = cm
area<-25*r^1.5          #aggregate surface area = cm2
#TB <- 8.4e5       #Total bacterial number (Kiorboe)
#mu <-  1.39e-3*(1.9e3*r^1.34)/(1.39e-3*area)/TB
Db<-1.4e-3          #diffusivity of bacteria
Df<-5.9e-3          #diffusivity of flagellate
Dc<-1.2e-3          #diffusivity of ciliate
betaB <- 4*pi*r*Db*Sherwood(r)/area          #Bacterial encounter kernel
betaF <- 4*pi*r*Df*Sherwood(r)/area          #Flagellate encounter kernel
betaC <- 4*pi*r*Dc*Sherwood(r)/area          #Ciliate encounter kernel
Yf <- 0.003          #Flagellate yield
Yc <- 0.003          #Ciliate yield
deltaB <- 2.3e-2          #bacterial detachment
deltaF <- 6.7e-3          #flagellate detachment
deltaC <- 6.4e-4          #ciliate detachment
gammaB <- deltaB*0.1    #permanent attachment rate of bacteria
kf <- 5e-7      #flagellate clearance rate at low density
kc <- 1.25e-5   #ciliate clearance rate at low density
Tf <- 0.24      #flagellate prey handling time, taken directly from Kiorboe 2003
Tc <- 0.24      #ciliate prey handling time
#z0 <- c(B=80000,E=3,F=192,C=1)   #This is the vector of intial population sizes based on the aggregate volume (Bacteria, Flagellates, Ciliates)
TB <-1e6           #ambient bacterial density
Fa0 <- 1e3          #ambient flagellate density
Ca0 <- 10           #ambient ciliate density
for (j in 1:4){
counter<-counter+1
Ea0 <- density[j]         #ambient focal species density
Ba0<-TB-Ea0           #non-focal bacteria density
times <- seq(1,20000,1)
parms<-c(betaB=betaB,betaF=betaF,betaC=betaC,Yf=Yf,Yc=Yc,deltaB=deltaB,deltaF=deltaF,deltaC=deltaC,
gammaB=gammaB,kf=kf,kc=kc,Tf=Tf,Tc=Tc,Ba0=Ba0,Ea0=Ea0,Fa0=Fa0,Ca0=Ca0,r=r,area=area)
initial <- c(BS=1,BU=0,EU=0,ES=0,F=0,C=0)
out <- lsoda(initial,times,simul,parms,rtol=1e-4)
N0 <- c(UB=round(as.numeric(out[max(times),2]*area)),AB=round(as.numeric(out[max(times),3]*area))
,UE=0,AE=0,F=round(as.numeric(out[max(times),6]*area)),
C=round(as.numeric(out[max(times),7]*area)))   #This is the vector of intial population sizes based on the aggregate volume (Bacteria, Flagellates, Ciliates)
pass[[counter]] <- list(N0,tmax,nu,S,parms)
}
}
cl <- makeCluster(1,type="SOCK")
clusterEvalQ(cl,library(GillespieSSA))
clusterExport(cl,'mu2')
clusterSetupRNG(cl)
time<-proc.time()
runs <- list()
sets<-rep(seq(1,40),10)
ids<-rep(seq(1,10),each=40)
for (i in 1:400){runs[[i]] <- c(pass[[sets[i]]],ids[i])}
result <- clusterApplyLB(cl,runs[[1]],Simulate) #This distributes the simulations across the cluster
save(result,file=paste("AggregateResultsAT/BTLSummary_",r,"_",Ea0,"_",i,".RData",sep=''))
stopCluster(cl)
elapse<-proc.time()-time
time<-proc.time()
runs <- list()
sets<-rep(seq(1,40),10)
ids<-rep(seq(1,10),each=40)
for (i in 1:400){runs[[i]] <- c(pass[[sets[i]]],ids[i])}
result <- sapply(cl,runs[[1]],Simulate)
#result <- clusterApplyLB(cl,runs[[1]],Simulate) #This distributes the simulations across the cluster
save(result,file=paste("AggregateResultsAT/BTLSummary_",r,"_",Ea0,"_",i,".RData",sep=''))
stopCluster(cl)
elapse<-proc.time()-time
runs[[1]]
result <- apply(cl,runs[[1]],Simulate)
runs[[1]]
result <- lapply(cl,runs[[1]],Simulate)
time<-proc.time()
runs <- list()
sets<-rep(seq(1,40),10)
ids<-rep(seq(1,10),each=40)
for (i in 1:400){runs[[i]] <- c(pass[[sets[i]]],ids[i])}
result <- sapply(runs[[1]],fun=Simulate)
#result <- clusterApplyLB(cl,runs[[1]],Simulate) #This distributes the simulations across the cluster
save(result,file=paste("AggregateResultsAT/BTLSummary_",r,"_",Ea0,"_",i,".RData",sep=''))
stopCluster(cl)
elapse<-proc.time()-time
time<-proc.time()
runs <- list()
sets<-rep(seq(1,40),10)
ids<-rep(seq(1,10),each=40)
for (i in 1:400){runs[[i]] <- c(pass[[sets[i]]],ids[i])}
result <- sapply(runs[[1]],FUN=Simulate)
#result <- clusterApplyLB(cl,runs[[1]],Simulate) #This distributes the simulations across the cluster
save(result,file=paste("AggregateResultsAT/BTLSummary_",r,"_",Ea0,"_",i,".RData",sep=''))
stopCluster(cl)
elapse<-proc.time()-time
runs[[1]]
class(runs[[4]])
s<-runs[[4]]
class(S)
Simulate <- function(pass){
N0 <- pass[[1]]; tmax <- pass[[2]]; nu <- pass[[3]]; S <- pass[[4]]; parms <- pass[[5]]
time <- 0;  count <- 0; Run <- NULL; id <- pass[[6]]
Turnover <- data.frame(time=0,Presence=0,timeElapsed=0)
state <- c(0,0)
Sum <- matrix(0,nrow=6,ncol=2); colnames(Sum) <- c("Average","Max"); rownames(Sum) <- c("UB","AB","UE","AE","F","C")
TS <- NULL
while (time<tmax){
if (time<10){Temp <- ssa(x0=N0, tf=tmax,method="BTL",nu=nu,a=S,parms=parms,maxWallTime=c(60))}
else {Temp <- ssa(x0=N0, tf=tmax,method="OTL",nu=nu,a=S,parms=parms,maxWallTime=c(60))}
N0 <- c(UB=tail(Temp$data,1)[,2],AB=tail(Temp$data,1)[,3],UE=tail(Temp$data,1)[,4],
AE=tail(Temp$data,1)[,5],F=tail(Temp$data,1)[,6],C=tail(Temp$data,1)[,7])
temp.time<-tail(Temp$data,1)[1]
Temp$data[,1] <- Temp$data[,1]+time
Total <- cbind(Temp$data[,1],Temp$data[,2]+Temp$data[,3],Temp$data[,4]+Temp$data[,5],Temp$data[,6],Temp$data[,7])
for (k in 1:dim(Total)[1]){
temp <- Total[k,3]
if (temp==0 & state[1]==1){
ch <- c(Total[k,1],0,Total[k,1]-state[2])
state <- c(0,Total[k,1])
Turnover <- rbind(Turnover,ch)
}else{
if (temp>0 & state[1]==0){
ch <- c(Total[k,1],1,Total[k,1]-state[2])
Turnover <- rbind(Turnover,ch)
state <- c(1,Total[k,1])
}
else{ state <- state}
}
}
temp.mean <- colSums((diff(Temp$data[,1])/temp.time)*Temp$data[1:(dim(Temp$data)[1]-1),2:7])
for (j in 1:6){
Sum[j,1] <- temp.mean[j]*(temp.time/(time+temp.time))+Sum[j,1]*(time/(time+temp.time))
Sum[j,2] <- ifelse(max(Temp$data[,j+1])>Sum[j,2],max(Temp$data[,j+1]),Sum[j,2])
}
TS<-rbind(TS,Total[,c(1,3)])
time <- time+temp.time; count <- count+1
}
endTime<-max(Total[,1])
results<-list(Sum,Turnover,endTime,c(density=parms[15],size=parms[18]),TS,count)
save(results,file=paste("AggregateResultsAT/BTL_",parms[18],"_",parms[15],"_rep",id,".RData",sep=''))
return(list(Sum,Turnover,endTime,c(density=parms[15],size=parms[18])))
}
result <- sapply(runs[[1]],FUN=Simulate)
S
result<-Simulate(runs[[1]])
time<-proc.time()
runs <- list()
sets<-rep(seq(1,40),10)
ids<-rep(seq(1,10),each=40)
for (i in 1:400){runs[[i]] <- c(pass[[sets[i]]],ids[i])}
result <- Simulate(runs[[1]])
cl <- makeCluster(1,type="SOCK")
clusterEvalQ(cl,library(GillespieSSA))
clusterExport(cl,'mu2')
clusterSetupRNG(cl)
time<-proc.time()
runs <- list()
sets<-rep(seq(1,40),10)
ids<-rep(seq(1,10),each=40)
for (i in 1:400){runs[[i]] <- c(pass[[sets[i]]],ids[i])}
#result <- Simulate(runs[[1]])
result <- clusterApplyLB(cl,list(runs[[1]]),Simulate) #This distributes the simulations across the cluster
save(result,file=paste("AggregateResultsAT/BTLSummary_",r,"_",Ea0,"_",i,".RData",sep=''))
stopCluster(cl)
elapse<-proc.time()-time
cl <- makeCluster(1,type="SOCK")
clusterEvalQ(cl,library(GillespieSSA))
clusterExport(cl,'mu2')
clusterSetupRNG(cl)
time<-proc.time()
runs <- list()
sets<-rep(seq(1,40),10)
ids<-rep(seq(1,10),each=40)
for (i in 1:400){runs[[i]] <- c(pass[[sets[i]]],ids[i])}
#result <- Simulate(runs[[1]])
result <- clusterApplyLB(cl,list(runs[[1]]),Simulate) #This distributes the simulations across the cluster
save(result,file=paste("AggregateResultsAT/BTLSummary_",r,"_",Ea0,"_",i,".RData",sep=''))
stopCluster(cl)
elapse<-proc.time()-time
time<-proc.time()
runs <- list()
sets<-rep(seq(1,40),10)
ids<-rep(seq(1,10),each=40)
for (i in 1:400){runs[[i]] <- c(pass[[sets[i]]],ids[i])}
result <- Simulate(runs[[1]])
#result <- clusterApplyLB(cl,list(runs[[1]]),Simulate) #This distributes the simulations across the cluster
save(result,file=paste("AggregateResultsAT/BTLSummary_",r,"_",Ea0,"_",i,".RData",sep=''))
stopCluster(cl)
elapse<-proc.time()-time
elapse
results
parms
paste("AggregateResultsAT/BTL_",parms[18],"_",parms[15],"_rep",id,".RData",sep='')
tmax <- 10      #max times steps to simulate
Simulate <- function(pass){
N0 <- pass[[1]]; tmax <- pass[[2]]; nu <- pass[[3]]; S <- pass[[4]]; parms <- pass[[5]]
time <- 0;  count <- 0; Run <- NULL; id <- pass[[6]]
Turnover <- data.frame(time=0,Presence=0,timeElapsed=0)
state <- c(0,0)
Sum <- matrix(0,nrow=6,ncol=2); colnames(Sum) <- c("Average","Max"); rownames(Sum) <- c("UB","AB","UE","AE","F","C")
TS <- NULL
while (time<tmax){
if (time<10){Temp <- ssa(x0=N0, tf=tmax,method="BTL",nu=nu,a=S,parms=parms,maxWallTime=c(60))}
else {Temp <- ssa(x0=N0, tf=tmax,method="OTL",nu=nu,a=S,parms=parms,maxWallTime=c(60))}
N0 <- c(UB=tail(Temp$data,1)[,2],AB=tail(Temp$data,1)[,3],UE=tail(Temp$data,1)[,4],
AE=tail(Temp$data,1)[,5],F=tail(Temp$data,1)[,6],C=tail(Temp$data,1)[,7])
temp.time<-tail(Temp$data,1)[1]
Temp$data[,1] <- Temp$data[,1]+time
Total <- cbind(Temp$data[,1],Temp$data[,2]+Temp$data[,3],Temp$data[,4]+Temp$data[,5],Temp$data[,6],Temp$data[,7])
for (k in 1:dim(Total)[1]){
temp <- Total[k,3]
if (temp==0 & state[1]==1){
ch <- c(Total[k,1],0,Total[k,1]-state[2])
state <- c(0,Total[k,1])
Turnover <- rbind(Turnover,ch)
}else{
if (temp>0 & state[1]==0){
ch <- c(Total[k,1],1,Total[k,1]-state[2])
Turnover <- rbind(Turnover,ch)
state <- c(1,Total[k,1])
}
else{ state <- state}
}
}
temp.mean <- colSums((diff(Temp$data[,1])/temp.time)*Temp$data[1:(dim(Temp$data)[1]-1),2:7])
for (j in 1:6){
Sum[j,1] <- temp.mean[j]*(temp.time/(time+temp.time))+Sum[j,1]*(time/(time+temp.time))
Sum[j,2] <- ifelse(max(Temp$data[,j+1])>Sum[j,2],max(Temp$data[,j+1]),Sum[j,2])
}
TS<-rbind(TS,Total[,c(1,3)])
time <- time+temp.time; count <- count+1
}
endTime<-max(Total[,1])
results<-list(Sum,Turnover,endTime,c(density=parms[15],size=parms[18]),TS,count)
save(results,file=paste("AggregateResultsAT/BTL_",parms[18],"_",parms[15],"_rep",id,".RData",sep=''))
return(list(Sum,Turnover,endTime,c(density=parms[15],size=parms[18])))
}
size.bins<-seq(log10(0.01),log10(1),length.out=11)  ##This and the following two lines set up the desired aggregate sizes by evenly splitting on a log scale
size.bins.midpoints<-NULL
for (i in 1:10) size.bins.midpoints[i]<-(size.bins[i]+size.bins[i+1])/2
radii <- 10^size.bins.midpoints  #Transform the desired aggregate sizes back to cm
density <- c(1e4,1e3,1e2,1e1)
counter<-0
pass<-list()
for (k in 1:10){
r<-radii[k]            #aggregate radius = cm
area<-25*r^1.5          #aggregate surface area = cm2
#TB <- 8.4e5       #Total bacterial number (Kiorboe)
#mu <-  1.39e-3*(1.9e3*r^1.34)/(1.39e-3*area)/TB
Db<-1.4e-3          #diffusivity of bacteria
Df<-5.9e-3          #diffusivity of flagellate
Dc<-1.2e-3          #diffusivity of ciliate
betaB <- 4*pi*r*Db*Sherwood(r)/area          #Bacterial encounter kernel
betaF <- 4*pi*r*Df*Sherwood(r)/area          #Flagellate encounter kernel
betaC <- 4*pi*r*Dc*Sherwood(r)/area          #Ciliate encounter kernel
Yf <- 0.003          #Flagellate yield
Yc <- 0.003          #Ciliate yield
deltaB <- 2.3e-2          #bacterial detachment
deltaF <- 6.7e-3          #flagellate detachment
deltaC <- 6.4e-4          #ciliate detachment
gammaB <- deltaB*0.1    #permanent attachment rate of bacteria
kf <- 5e-7      #flagellate clearance rate at low density
kc <- 1.25e-5   #ciliate clearance rate at low density
Tf <- 0.24      #flagellate prey handling time, taken directly from Kiorboe 2003
Tc <- 0.24      #ciliate prey handling time
#z0 <- c(B=80000,E=3,F=192,C=1)   #This is the vector of intial population sizes based on the aggregate volume (Bacteria, Flagellates, Ciliates)
TB <-1e6           #ambient bacterial density
Fa0 <- 1e3          #ambient flagellate density
Ca0 <- 10           #ambient ciliate density
for (j in 1:4){
counter<-counter+1
Ea0 <- density[j]         #ambient focal species density
Ba0<-TB-Ea0           #non-focal bacteria density
times <- seq(1,20000,1)
parms<-c(betaB=betaB,betaF=betaF,betaC=betaC,Yf=Yf,Yc=Yc,deltaB=deltaB,deltaF=deltaF,deltaC=deltaC,
gammaB=gammaB,kf=kf,kc=kc,Tf=Tf,Tc=Tc,Ba0=Ba0,Ea0=Ea0,Fa0=Fa0,Ca0=Ca0,r=r,area=area)
initial <- c(BS=1,BU=0,EU=0,ES=0,F=0,C=0)
out <- lsoda(initial,times,simul,parms,rtol=1e-4)
N0 <- c(UB=round(as.numeric(out[max(times),2]*area)),AB=round(as.numeric(out[max(times),3]*area))
,UE=0,AE=0,F=round(as.numeric(out[max(times),6]*area)),
C=round(as.numeric(out[max(times),7]*area)))   #This is the vector of intial population sizes based on the aggregate volume (Bacteria, Flagellates, Ciliates)
pass[[counter]] <- list(N0,tmax,nu,S,parms)
}
}
cl <- makeCluster(1,type="SOCK")
clusterEvalQ(cl,library(GillespieSSA))
clusterExport(cl,'mu2')
clusterSetupRNG(cl)
time<-proc.time()
runs <- list()
sets<-rep(seq(1,40),10)
ids<-rep(seq(1,10),each=40)
for (i in 1:400){runs[[i]] <- c(pass[[sets[i]]],ids[i])}
#result <- Simulate(runs[[1]])
result <- clusterApplyLB(cl,list(runs[[1]]),Simulate) #This distributes the simulations across the cluster
save(result,file=paste("AggregateResultsAT/BTLSummary_",r,"_",Ea0,"_",i,".RData",sep=''))
stopCluster(cl)
elapse<-proc.time()-time
getOption("rstudio.markdownToHTML")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("markdown")
library(sp)
setwd("M:/Users/Drew Kramer/Documents/Drew/Ebola project/Ebola WA Metapopulation Manuscript/DataAndCode/DataAndCode")
counties<-readRDS('WestAfricaCountyPolygons.rds')
ord.counties<-data.frame(country=counties$ISO[1:63],pop.size=counties$pop.size[1:63],county_names=counties$county_names[1:63],PID=seq(1,63))
location.sims<-readRDS("newsims/locationsims.ggb.wa.RDS")
##Function to get number of counties infected, by sim, by origin
inf.sum<-function(data){
data<-data[,-1] ##Remove the leading PID column
data<-ifelse(data<Inf,1,0)
return(colSums(data))
}
infect.sums<-sapply(location.sims,FUN=inf.sum)
#calculate quantiles for prediction intervals
q=apply(infect.sums,2,quantile,probs=c(.025,.25,.5,.75,.975))
max.inf<-max(q)
#Create data frame of quantiles
ord.counties<-data.frame(ord.counties,q2.5=q[1,],q25=q[2,],q50=q[3,],q75=q[4,],q97.5=q[5,])
##Reorder within each country by median number infected
order.sl<-sort(ord.counties$q50[1:14],decreasing=T,index.return=T)$ix
order.guin<-sort(ord.counties$q50[15:48],decreasing=T,index.return=T)$ix
order.lib<-sort(ord.counties$q50[49:63],decreasing=T,index.return=T)$ix
ord.counties1<-rbind(ord.counties[1:14,][order.sl,],ord.counties[15:48,][order.guin,],ord.counties[49:63,][order.lib,])
pdf(width=7,height=4,"Fig 3_Originiation scenarios.pdf")
par(mar=c(6.5,3,0.25,0),las=1)
plot(NA,xlim=c(1,66),ylim=c(0,107),xlab='',ylab='',xaxt="n",main=NULL,bty='n',cex.axis=0.9)
bordercolor<-"white"
for(i in 1:63){
if(i<15) {color<-"#3FBAE9" ##Colors match the country colors on the network map
transp.color<-adjustcolor(color,alpha.f=0.2)
}
if(i>14 & i<49) {color<-"#568E57"    # Old color"#5E5E68"
transp.color<-adjustcolor(color,alpha.f=0.2)
}
if(i>48) {color<-"#F5B61E"
transp.color<-adjustcolor(color,alpha.f=0.2)
}
rect((i-1),ord.counties1$q2.5[i],i,ord.counties1$q97.5[i],border=bordercolor,col=transp.color,lwd=0.5) # 95% confidance interval
rect((i-1),ord.counties1$q25[i],i,ord.counties1$q75[i],border=bordercolor,col=color,lwd=0.5) # interquartile range
rect((i-1),ord.counties1$q50[i],i,ord.counties1$q50[i],border=bordercolor,col=bordercolor,lwd=0.75) # median
}
highlight<-c(2,6,15,21,49)#These are Kenema, Western Urban, Conakry, Gueckedou, Montserrado
for(i in highlight){
if(i<15) {color<-"#3FBAE9"
transp.color<-adjustcolor(color,alpha.f=0.4)
}
if(i>14 & i<49) {color<-"#568E57"    #Old color "#5E5E68"
transp.color<-adjustcolor(color,alpha.f=0.4)
}
if(i>48) {color<-"#F5B61E"
transp.color<-adjustcolor(color,alpha.f=0.4)
}
rect((i-1),ord.counties1$q2.5[i],i,ord.counties1$q97.5[i],border=bordercolor,col=transp.color,lwd=0.5) # 95% confidance interval
rect((i-1),ord.counties1$q25[i],i,ord.counties1$q75[i],border=bordercolor,col=color,lwd=0.5) # interquartile range
rect((i-1),ord.counties1$q50[i],i,ord.counties1$q50[i],border=bordercolor,col=bordercolor,lwd=0.75) # median
}
bordercolor<-"white"
rect(64.5,25.975,65.5,105,border=bordercolor,col=adjustcolor("#AED4B5",alpha.f=0.2),lwd=0.5) # 95% confidance interval
rect(64.5,43,65.5,62,border=bordercolor,col="#568E57",lwd=0.5) # interquartile range
rect(64.5,51,65.5,51,border=bordercolor,col=bordercolor,lwd=0.75) # median
# add actual nubmer infected as line, there were 56 infected counties on 10-22
points(x=65,y=56,pch=23,col="black",bg="white",cex=1.1)
text(64,73,col="#5E5E68",cex=0.66,"Actual infections\nby Oct. 24, 2014",adj=c(1,NA))
arrows(x0=62,x1=64,y0=67.5,y1=57.5,col="#5E5E68",length=0.05)
##x-axis
axis(1,at=seq(0.5,62.5,1),labels=FALSE)
axis(1,at=seq(64,66,1),labels=FALSE)
text(seq(1.5,63.5,1), -10, labels = ord.counties1$county_names, srt = 90, pos = 2, xpd = TRUE,cex=0.66)
text(66,-10,"Conakry + Guéckédou",srt=90, pos=2,xpd=TRUE,cex=0.66)
mtext(side=2,line=2,las=3,"Infected Counties",cex=0.9)
rect(xleft=1.25,xright=2.75,ybottom=90,ytop=93,col="#3FBAE9",border="white"); text(2.75,91.5,"Sierra Leone",col="#3FBAE9",cex=0.9,pos=4)
rect(xleft=25.5,xright=27,ybottom=90,ytop=93,col="#568E57",border="white"); text(26.5,91.5,"Guinea",col="#568E57",cex=0.9,pos=4)
rect(xleft=51.5,xright=53,ybottom=90,ytop=93,col="#F5B61E",border="white"); text(53,91.5,"Liberia",col="#F5B61E",cex=0.9,pos=4)
dev.off ()
##Accessory ANOVA to look at variance explained by initially infected unit
